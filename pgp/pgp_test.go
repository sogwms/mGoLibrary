package pgp

import (
	"io"
	"testing"
	"time"
)

const USERA_KEY = `
-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=Og4T
-----END PGP PRIVATE KEY BLOCK-----
`

const USERB_KEY = `
-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=cO+X
-----END PGP PRIVATE KEY BLOCK-----
`

const (
	USERA_KEY_PASSPHRASE = `UserA`
	USERB_KEY_PASSPHRASE = `UserB`
)

func TestEncryptionAndDecryption(t *testing.T) {
	keyUserA, err := ReadArmoredKeyRingFromString(USERA_KEY)
	if err != nil {
		t.Fatal(err.Error())
	}
	keyUserB, err := ReadArmoredKeyRingFromString(USERB_KEY)
	if err != nil {
		t.Fatal(err.Error())
	}

	if err := DecodePrivateKey(keyUserA, []byte(USERA_KEY_PASSPHRASE)); err != nil {
		t.Fatal(err.Error())
	}
	if err := DecodePrivateKey(keyUserB, []byte(USERB_KEY_PASSPHRASE)); err != nil {
		t.Fatal(err.Error())
	}

	receivers := EntityList{keyUserB}
	encrypter, err := NewEncrypter(receivers, keyUserA)
	if err != nil {
		t.Fatal(err.Error())
	}

	plainText := time.Now().String() + "\tHello, openpgp"

	encrypter.Write([]byte(plainText))
	encrypter.Close()
	buffer := encrypter.Buffer()
	data, _ := io.ReadAll(buffer)
	cipherText := string(data)

	// t.Log(cipherText)

	var keys EntityList
	keys = append(keys, keyUserA)
	keys = append(keys, keyUserB)
	msgDetail, err := DecryptArmoredMessageFromString(cipherText, keys)
	if err != nil {
		t.Fatal(err.Error())
	}
	decryptedData, _ := io.ReadAll(msgDetail.UnverifiedBody)
	decryptedText := string(decryptedData)

	// t.Log(decryptedText)

	if plainText != decryptedText {
		t.Fatal("unequal message")
	}
}

func TestEncrypterReset(t *testing.T) {

}
